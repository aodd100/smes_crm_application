@using Microsoft.Activities.Extensions.Tracking
@model db.crmdb.dbData.ViewAccountDetail

@{
    ViewBag.Title = "Edit User Account";
    Layout = "~/Views/_LayoutAdminPage.cshtml";
    <style>
        .formRight .image {
            border: dashed 1px #59595A;
        }
        /*.WeekenDivWrapper .form-group {
            width: 100%;
            display: flex;
            flex-flow: row;
        }*/
        .WeekenDivWrapper .form-group .col-md-10 {
            width: 100%;
            display: flex;
            flex-flow: row;
        }

            .WeekenDivWrapper .form-group .col-md-10 input {
                flex: 4;
            }

            .WeekenDivWrapper .form-group .col-md-10 img {
                vertical-align: middle;
                margin-left: 4px;
                top: -3px;
                position: relative;
            }

            .WeekenDivWrapper .form-group .col-md-10 input, .WeekenDivWrapper .form-group .col-md-10 textarea, .WeekenDivWrapper .form-group .col-md-10 select {
                width: 96%;
            }
    </style>
}



@using (Html.BeginForm("Edit", "Account", FormMethod.Post, new { enctype = "multipart/form-data", onSubmit = "return jQueryAjaxPost(this)" }))
{
    @Html.AntiForgeryToken()


    <div id="tabberpage" class="form-horizontal">
        <div class="topDiv">
            <div class="topDivSub1">

            </div>
            <div class="topDivSub2">
                @Html.ActionLink("Go to List", "Index", "", htmlAttributes: new { @class = "save" })
                <input type="submit" value="Update" class="save" />
            </div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UID)
        @Html.HiddenFor(model => model.ImagePath)
        <div id="dynabox" class="dynaskin popup-content" style="display:none;">
            <div id="dragbar" class="CommonColor" style="text-align:right;color: #fff;">
                <span id="hidebox"><b>X&nbsp;</b></span>
            </div>
            <iframe scrolling="yes" id="dynaframe" name="dynaframe" src="" frameborder="0"></iframe>
        </div>
        <div class="formMain">
            <div class="formLeft">

                <div class="form-group">
                    @Html.LabelFor(model => model.USERACCOUNT, "USER ACCOUNT", new { htmlAttributes = new { @class = "control-label col-md-2", placeholder = "aaaaaaa.ccccccc@irslconsulting.com" } })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.USERACCOUNT, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.USERACCOUNT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FIRSTNAME, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FIRSTNAME, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FIRSTNAME, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LASTNAME, "LAST NAME", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LASTNAME, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LASTNAME, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PASSWORD, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.PASSWORD, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PASSWORD, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label style="" class="control-label col-md-2">CONFIRM PASSWORD</label>
                    <div class="col-md-10">
                        @Html.Password("CONFIRM PASSWORD", "", new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.PASSWORD, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ACCESSLEVEL, "ACCESS LEVEL", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ACCESSLEVEL, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ACCESSLEVEL, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ACTIVE, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ACTIVE, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ACTIVE, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="WeekenDivWrapper">
                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKSTART_1, "WORK START_1", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKSTART_1, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important" } })
                            @Html.ValidationMessageFor(model => model.WORKSTART_1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKEND_1, "WORK END_1", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKEND_1, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important" } })
                            @Html.ValidationMessageFor(model => model.WORKEND_1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKSTART_2, "WORK START_2", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKSTART_2, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important" } })
                            @Html.ValidationMessageFor(model => model.WORKSTART_2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKEND_2, "WORK END_2", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKEND_2, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important" } })
                            @Html.ValidationMessageFor(model => model.WORKEND_2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKDAYS, "WORK DAYS", htmlAttributes: new { @class = "control-label col-md-2", @style = "width:89%  !important" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKDAYS, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WORKDAYS, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.GROUPID, "GROUPID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GROUPID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GROUPID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DIARYACCOUNT, "DIARY ACCOUNT", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DIARYACCOUNT, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DIARYACCOUNT, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="formRight">
                <div class="form-group image">
                    <label>Picture</label>
                    <div class="col-md-10">
                        <img src="@Url.Content(Model.ImagePath)" style="margin: 10px;height: 200px" id="imagePreview" />
                        <input type="file" name="ImageUpload" accept="image/jpeg, image/png" onchange="ShowImagePreview(this,document.getElementById('imagePreview'))" />
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AccountType, "Role", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.AccountTypeID, ViewBag.AccountType as SelectList)
                        @Html.ValidationMessageFor(model => model.AccountType, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CULTURE, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("CULTURE", new List<SelectListItem>
                               {
                                   new SelectListItem { Text = "EN", Value = "EN" },
                                   new SelectListItem { Text = "NG", Value = "NG" }})
                        @Html.ValidationMessageFor(model => model.CULTURE, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.STATE, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.STATE)
                                @Html.ValidationMessageFor(model => model.STATE, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@

                <div class="form-group">
                    @Html.LabelFor(model => model.LASTLOGIN, "LAST LOGIN", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LASTLOGIN, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.LASTLOGIN, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NOTIFYEMAIL, "NOTIFY EMAIL", htmlAttributes: new { @class = "control-label col-md-2", placeholder = "aaaaaaa.ccccccc@irslconsulting.com" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NOTIFYEMAIL, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.NOTIFYEMAIL, "", new { @class = "text-danger" })
                    </div>
                </div>



            </div>
        </div>
        <HR />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update" class="save" />
                <br />
                <br />
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="@Url.Content("~/js/jquery-ui.js")"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/irsl_validation.js"></script>
    <script type="text/javascript">

        $(function () {
            $("#WORKSTART_1").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });
            $("#WORKEND_1").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });

            $("#WORKSTART_2").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });

            $("#WORKEND_2").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });
        });



        function ShowImagePreview(imageUploader, previewImage) {
            if (imageUploader.files && imageUploader.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $(previewImage).attr('src', e.target.result);
                }
                reader.readAsDataURL(imageUploader.files[0]);
            }
        }
        function jQueryAjaxPost(form) {
            var result = true;
            var form = $(form);
            $.ajaxSetup({ cache: false });
            msg = "";
            msg += "Error \n" +
                "-------------------------------------------------\n" +
                " Some Fields are invalid\n" +
                " Please, check your form again and re submit\n";

            if ($("#USERACCOUNT").val() == "") {
                $("#USERACCOUNT").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* USER ACCOUNT field required";
            } else {
                $("#USERACCOUNT").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#CULTURE").val() == "") {
                $("#CULTURE").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* CULTURE field required";
            } else {
                $("#CULTURE").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#LASTNAME").val() == "") {
                $("#LASTNAME").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* LAST NAME field required";
            } else {
                $("#LASTNAME").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#FIRSTNAME").val() == "") {
                $("#FIRSTNAME").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* FIRST NAME field required";
            } else {
                $("#FIRSTNAME").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#FIRSTNAME").val() == "") {
                $("#FIRSTNAME").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* FIRST NAME field required";
            } else {
                $("#FIRSTNAME").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#PASSWORD").val() == "") {
                $("#PASSWORD").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* PASSWORD field required";
            } else {
                $("#PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#CONFIRM_PASSWORD").val() == "") {
                $("#CONFIRM_PASSWORD").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* CONFIRM PASSWORD field required";
            } else {
                $("#CONFIRM_PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });
            }
            if ($("#AccountTypeID :selected").val() == "") {
                $("#AccountTypeID").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* Role field required";
            } else {
                $("#AccountTypeID").css({ "border": "1px solid rgb(122, 122, 122)" });
            }


            //if ($("#tabberpage #closedate").val() !== "" && $("#tabberpage #closedate").val() !== "na") {

            //    if (isFutureDate($("#tabberpage #closedate").val())) {
            //        $("#tabberpage #closedate").css({ "border": "2px solid #f90a0a" });
            //        alert("entered date is a future date");
            //        $("#tabberpage #closedate").val("")
            //        result = false;
            //    } else {
            //        $("#tabberpage #closedate").css({ "border": "1px solid rgb(122, 122, 122)" });
            //    }
            //}

            if (result) {

                $.ajax({
                    type: 'POST',
                    url: $(form)[0].action,
                    data: $(form).serialize(),
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            //$("#firstTab").html(response.html);
                            $.notify(response.message, "success");
                        }
                        else {
                            $.notify(response.message, "error");
                        }

                    }
                });
                return true;
            }
            else {
                alert(msg);
            }
            return false;
        }
    </script>
}
