@using Microsoft.Activities.Extensions.Tracking
@model db.crmdb.dbData.ViewAccountDetail

@{
    ViewBag.Title = "Manage User Account";
    Layout = "~/Views/_LayoutAdminPage.cshtml";
    <style>
        .formRight .image {
            border: dashed 1px #59595A;
        }
        /*.WeekenDivWrapper .form-group {
            width: 100%;
            display: flex;
            flex-flow: row;
        }*/
        .WeekenDivWrapper .form-group .col-md-10 {
            width: 100%;
            display: flex;
            flex-flow: row;
        }

            .WeekenDivWrapper .form-group .col-md-10 input {
                flex: 4;
            }

            .WeekenDivWrapper .form-group .col-md-10 img {
                vertical-align: middle;
                margin-left: 4px;
                top: -3px;
                position: relative;
            }

            .WeekenDivWrapper .form-group .col-md-10 input, .WeekenDivWrapper .form-group .col-md-10 textarea, .WeekenDivWrapper .form-group .col-md-10 select {
                width: 96%;
            }
    </style>
}



@using (Html.BeginForm("Create", "Account", FormMethod.Post, new { enctype = "multipart/form-data", onSubmit = "return jQueryAjaxPost(this)", @class = "wpcf7-form", id = "register-form" }))
{
    @Html.AntiForgeryToken()


    <div id="tabberpage" class="form-horizontal">
        <div class="topDiv">
            <div class="topDivSub1">

            </div>
            <div class="topDivSub2">
                @Html.ActionLink("Go to List", "Index", "", htmlAttributes: new { @class = "save" })
                <input type="submit" value="Save" class="save" />
            </div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UID)
        @Html.HiddenFor(model => model.ImagePath)
        @if (ViewBag.ErrorMessage !=null)
        {
            <script type="text/javascript">
                alert("@ViewBag.ErrorMessage");
            </script>
        }
        <div id="errorDive">
        </div>
        <div class="formMain">
            <div class="formLeft">

                <div class="form-group">
                    @Html.LabelFor(model => model.USERACCOUNT, "USER ACCOUNT", new { htmlAttributes = new { @class = "control-label col-md-2" } })
                    <div class="col-md-10" style="right:-11px;">
                        @Html.EditorFor(model => model.USERACCOUNT, new { htmlAttributes = new { @class = "form-control", @style = "width: 92% ! important;", placeholder = "firstname.surname@irslconsulting.com", required = "true" } })
                        @Html.ValidationMessageFor(model => model.USERACCOUNT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FIRSTNAME, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FIRSTNAME, new { htmlAttributes = new { @class = "form-control", required = "true" } })
                        @Html.ValidationMessageFor(model => model.FIRSTNAME, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LASTNAME, "LAST NAME", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LASTNAME, new { htmlAttributes = new { @class = "form-control", required = "true" } })
                        @Html.ValidationMessageFor(model => model.LASTNAME, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PASSWORD, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.PASSWORD, new { htmlAttributes = new { @class = "form-control", required = "true" } })
                        @Html.ValidationMessageFor(model => model.PASSWORD, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <label style="" class="control-label col-md-2">CONFIRM PASSWORD</label>
                    <div class="col-md-10">
                        @Html.Password("CONFIRM PASSWORD", "", new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    <label style="" class="control-label col-md-2">BIRTHDATE</label>
                    <div class="col-md-10">
                        @Html.TextBox("birthdate", "", new { htmlAttributes = new { @class = "form-control", required = "true" } })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ACCESSLEVEL, "ACCESS LEVEL", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ACCESSLEVEL, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ACCESSLEVEL, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ACTIVE, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ACTIVE, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ACTIVE, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="WeekenDivWrapper">
                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKSTART_1, "WORK START_1", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKSTART_1, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important" } })
                            @Html.ValidationMessageFor(model => model.WORKSTART_1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKEND_1, "WORK END_1", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKEND_1, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important", read_only = "true" } })
                            @Html.ValidationMessageFor(model => model.WORKEND_1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKSTART_2, "WORK START_2", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKSTART_2, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important" } })
                            @Html.ValidationMessageFor(model => model.WORKSTART_2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKEND_2, "WORK END_2", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKEND_2, new { htmlAttributes = new { @class = "form-control", @style = "width:89%  !important", read_only = "true" } })
                            @Html.ValidationMessageFor(model => model.WORKEND_2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.WORKDAYS, "WORK DAYS", htmlAttributes: new { @class = "control-label col-md-2", @style = "width:89%  !important" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.WORKDAYS, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WORKDAYS, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.GROUPID, "OFFICEID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("OFFICEID", new List<SelectListItem>
                                                         {
                                                             new SelectListItem { Text = "Main Office", Value = "1" },
                                                             new SelectListItem { Text = "Branch Office", Value = "2" },
                                                         }, new { htmlAttributes = new { @class = "form-control", @style="width:88%;" } })
                        @Html.ValidationMessageFor(model => model.OFFICEID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.GROUPID, "GROUPID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GROUPID, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GROUPID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="formRight">
                <div class="form-group image">
                    <label>Picture</label>
                    <div class="col-md-10">
                        <img src="@Url.Content(Model.ImagePath)" style="margin: 10px;height: 200px" id="imagePreview" />
                        <input type="file" name="ImageUpload" accept="image/jpeg, image/png" onchange="ShowImagePreview(this,document.getElementById('imagePreview'))" />
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AccountTypeID, "Role", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.AccountTypeID, ViewBag.AccountType as SelectList, "--Select Role--")
                        @Html.ValidationMessageFor(model => model.AccountTypeID,"", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.CULTURE, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("CULTURE", new List<SelectListItem>
                               {
                                   new SelectListItem { Text = "EN", Value = "EN" },
                                   new SelectListItem { Text = "NG", Value = "NG" }})
                        @Html.ValidationMessageFor(model => model.CULTURE, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LASTLOGIN, "LAST LOGIN", htmlAttributes: new { @class = "control-label col-md-2", readOnly = "true" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LASTLOGIN, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.LASTLOGIN, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NOTIFYEMAIL, "NOTIFY EMAIL", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NOTIFYEMAIL, new { htmlAttributes = new { @class = "form-control", placeholder = "firstname.surname@irslconsulting.com", required = "true" } })
                        @Html.ValidationMessageFor(model => model.NOTIFYEMAIL, "", new { @class = "text-danger", placeholder = "firstname.surname@irslconsulting.com", required = "true" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.DIARYACCOUNT, "DIARY ACCOUNT", htmlAttributes: new { @class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DIARYACCOUNT, new { htmlAttributes = new { @class = "form-control", placeholder = "firstname.surname@irslconsulting.com", required = "true" } })
                        @Html.ValidationMessageFor(model => model.DIARYACCOUNT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.OFFICEACCOUNT, "OFFICE ACCOUNT", htmlAttributes: new { @class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OFFICEACCOUNT, new { htmlAttributes = new { @class = "form-control", placeholder = "firstname.surname@irslconsulting.com", required = "true" } })
                        @Html.ValidationMessageFor(model => model.OFFICEACCOUNT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TIMEZONE, "TimeZone", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select class="inf-select is-component field-valid" id="TIMEZONE" name="TIMEZONE" data-on="Component.Select">
                            <option value="Pacific/Pago_Pago">(GMT -11:00) Pago Pago</option>
                            <option value="America/Adak">(GMT -09:00) Adak</option>
                            <option value="Pacific/Honolulu">(GMT -10:00) Hawaii</option>
                            <option value="Pacific/Marquesas">(GMT -09:30) Marquesas</option>
                            <option value="America/Anchorage">(GMT -08:00) Anchorage</option>
                            <option value="Pacific/Gambier">(GMT -09:00) Gambier</option>
                            <option value="America/Santa_Isabel">(GMT -07:00) Santa Isabel</option>
                            <option value="America/Los_Angeles">(GMT -07:00) Pacific Time (US &amp; Canada)</option>
                            <option value="Pacific/Pitcairn">(GMT -08:00) Pitcairn</option>
                            <option value="America/Mazatlan">(GMT -06:00) Mazatlan</option>
                            <option value="America/Denver">(GMT -06:00) Mountain Time (US &amp; Canada)</option>
                            <option value="America/Phoenix">(GMT -07:00) Phoenix</option>
                            <option value="Pacific/Easter">(GMT -05:00) Easter Island</option>
                            <option value="America/Chicago">(GMT -05:00) Central Time (US &amp; Canada)</option>
                            <option value="America/Mexico_City">(GMT -05:00) Mexico City</option>
                            <option value="America/Guatemala">(GMT -06:00) Guatemala</option>
                            <option value="America/New_York">(GMT -04:00) Eastern Time (US &amp; Canada)</option>
                            <option value="America/Havana">(GMT -04:00) Havana</option>
                            <option value="America/Bogota">(GMT -05:00) Bogota</option>
                            <option value="America/Caracas">(GMT -04:30) Caracas</option>
                            <option value="America/Halifax">(GMT -03:00) Halifax</option>
                            <option value="America/Santiago">(GMT -03:00) Santiago</option>
                            <option value="America/Asuncion">(GMT -03:00) Asuncion</option>
                            <option value="America/Goose_Bay">(GMT -03:00) Goose Bay</option>
                            <option value="Atlantic/Stanley">(GMT -03:00) Stanley</option>
                            <option value="America/Santo_Domingo">(GMT -04:00) Santo Domingo</option>
                            <option value="America/Campo_Grande">(GMT -04:00) Campo Grande</option>
                            <option value="America/St_Johns">(GMT -02:30) St Johns</option>
                            <option value="America/Montevideo">(GMT -02:00) Montevideo</option>
                            <option value="America/Godthab">(GMT -02:00) Godthab</option>
                            <option value="America/Miquelon">(GMT -02:00) Miquelon</option>
                            <option value="America/Sao_Paulo">(GMT -03:00) Sao Paulo</option>
                            <option value="America/Argentina/Buenos_Aires">(GMT -03:00) Buenos Aires</option>
                            <option value="America/Noronha">(GMT -02:00) Noronha</option>
                            <option value="Atlantic/Azores">(GMT) Azores</option>
                            <option value="Atlantic/Cape_Verde">(GMT -01:00) Cape Verde</option>
                            <option value="UTC" selected="selected">(GMT) Greenwich Mean Time</option>
                            <option value="Europe/London">(GMT +01:00) Dublin, Edinburgh, London</option>
                            <option value="Africa/Lagos">(GMT +01:00) West Central Africa</option>
                            <option value="Europe/Berlin">(GMT +02:00) Amsterdam, Berlin, Paris</option>
                            <option value="Africa/Windhoek">(GMT +02:00) Windhoek</option>
                            <option value="Africa/Cairo">(GMT +02:00) Cairo</option>
                            <option value="Asia/Gaza">(GMT +02:00) Gaza</option>
                            <option value="Africa/Johannesburg">(GMT +02:00) Johannesburg</option>
                            <option value="Asia/Jerusalem">(GMT +02:00) Jerusalem</option>
                            <option value="Asia/Beirut">(GMT +03:00) Beirut</option>
                            <option value="Asia/Damascus">(GMT +03:00) Damascus</option>
                            <option value="Europe/Istanbul">(GMT +03:00) Istanbul</option>
                            <option value="Asia/Baghdad">(GMT +03:00) Baghdad</option>
                            <option value="Europe/Minsk">(GMT +03:00) Minsk</option>
                            <option value="Asia/Tehran">(GMT +03:30) Tehran</option>
                            <option value="Europe/Moscow">(GMT +04:00) Moscow</option>
                            <option value="Asia/Dubai">(GMT +04:00) Dubai</option>
                            <option value="Asia/Yerevan">(GMT +05:00) Yerevan</option>
                            <option value="Asia/Baku">(GMT +05:00) Baku</option>
                            <option value="Asia/Kabul">(GMT +04:30) Kabul</option>
                            <option value="Asia/Karachi">(GMT +05:00) Karachi</option>
                            <option value="Asia/Kolkata">(GMT +05:30) Kolkata</option>
                            <option value="Asia/Kathmandu">(GMT +05:45) Kathmandu</option>
                            <option value="Asia/Dhaka">(GMT +06:00) Dhaka</option>
                            <option value="Asia/Yekaterinburg">(GMT +06:00) Yekaterinburg</option>
                            <option value="Asia/Rangoon">(GMT +06:30) Rangoon</option>
                            <option value="Asia/Jakarta">(GMT +07:00) Jakarta</option>
                            <option value="Asia/Omsk">(GMT +07:00) Omsk</option>
                            <option value="Asia/Shanghai">(GMT +08:00) Manila, Perth, Shanghai</option>
                            <option value="Asia/Krasnoyarsk">(GMT +08:00) Krasnoyarsk</option>
                            <option value="Australia/Eucla">(GMT +08:45) Eucla</option>
                            <option value="Asia/Irkutsk">(GMT +09:00) Irkutsk</option>
                            <option value="Asia/Tokyo">(GMT +09:00) Osaka, Sapporo, Tokyo</option>
                            <option value="Australia/Darwin">(GMT +09:30) Darwin</option>
                            <option value="Australia/Adelaide">(GMT +10:30) Adelaide</option>
                            <option value="Asia/Yakutsk">(GMT +10:00) Yakutsk</option>
                            <option value="Australia/Brisbane">(GMT +10:00) Brisbane</option>
                            <option value="Australia/Sydney">(GMT +11:00) Canberra, Melbourne, Sydney</option>
                            <option value="Australia/Lord_Howe">(GMT +11:00) Lord Howe</option>
                            <option value="Asia/Vladivostok">(GMT +11:00) Vladivostok</option>
                            <option value="Pacific/Noumea">(GMT +11:00) Noumea</option>
                            <option value="Pacific/Norfolk">(GMT +11:30) Norfolk</option>
                            <option value="Pacific/Tarawa">(GMT +12:00) Tarawa</option>
                            <option value="Asia/Kamchatka">(GMT +12:00) Kamchatka</option>
                            <option value="Pacific/Fiji">(GMT +12:00) Fiji</option>
                            <option value="Pacific/Majuro">(GMT +12:00) Majuro</option>
                            <option value="Pacific/Auckland">(GMT +13:00) Auckland</option>
                            <option value="Pacific/Chatham">(GMT +13:45) Chatham</option>
                            <option value="Pacific/Tongatapu">(GMT +13:00) Tongatapu</option>
                            <option value="Pacific/Apia">(GMT +13:00) Apia</option>
                            <option value="Pacific/Kiritimati">(GMT +14:00) Kiritimati</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.TIMEZONE, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <HR />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="save" />
                <br />
                <br />
            </div>
        </div>
    </div>
}
    <div class="loader">
        <img id="img" src="@Url.Content("~/images/ajax_loader_gray_256.gif")" alt="Alternate Text" />
    </div>
@section Scripts {
    <script src="@Url.Content("~/js/jquery-ui.js")"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/irsl_validation.js"></script>
    <script type="text/javascript">

        $(function () {
            $(document).ready(function () {
                $(".loader").css("display", "none");
            });

            $(document).ajaxStart(function () {
                $(".loader").css("display", "block");
            });

            $(document).ajaxComplete(function () {
                $(".loader").css("display", "none");
            });


            var date = new Date();
            date.setDate(date.getDate() + 6);
            date.setFullYear(date.getFullYear() + 35);

            $("#WORKEND_1").val(toDate(("0" + date.getDate()).slice(-2) +
                '/' +
                ("0" + date.getMonth()).slice(-2) +
                '/' +
                (date.getFullYear())));

            $("#WORKEND_2").val(toDate(("0" + date.getDate()).slice(-2) +
                '/' +
                ("0" + date.getMonth()).slice(-2) +
                '/' +
                (date.getFullYear())));

            $("#WORKSTART_1").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });
            $("#WORKEND_1").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });

            $("#WORKSTART_2").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });

            $("#WORKEND_2").datepicker({
                showOn: "button",
                buttonImage: "/i/SmallCalendar.gif",
                buttonImageOnly: true,
                buttonText: "Select date"
            });
            $(document).on("blur",
                "#tabberpage #USERACCOUNT",
                function () {
                    if (check_mail($(this), "", $(this).val())) {
                        $(this).css({ "border": "1px solid rgb(122, 122, 122)" });

                        result = true;
                    } else {
                        $(this).css({ "border": "2px solid #F90A0A" });
                        result = false;
                    }
                });
            if ($('#tabberpage #USERACCOUNT').focusout(function () {
                check_mail($('#tabberpage #USERACCOUNT'), "USERACCOUNT", $('#tabberpage #USERACCOUNT').val());
            }));

            if ($('#FIRSTNAME').change(function () {
                check_name($('#tabberpage #FIRSTNAME'), "FIRSTNAME", $('#tabberpage #FIRSTNAME').val());
            }));

            if ($('#LASTNAME').change(function () {
                check_name($('#tabberpage #LASTNAME'), "LASTNAME", $('#tabberpage #LASTNAME').val());
            }));
            $("#PASSWORD").on("focusout", function () {
                if ($(this).val().length < 6) {
                    $(this).after("<span class='error' style='color:red'>PASSWORD must be greater than 6 charachters</span>");
                } else {
                    if ($(this).parent().children(".error").length > 0) {
                        $(this).closest("div").find(".error").remove();
                    }
                    $("#PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });
                    if ($("#PASSWORD").val() == $("#CONFIRM_PASSWORD").val()) {
                        if ($("#CONFIRM_PASSWORD").parent().children(".error").length > 0) {
                            $("#CONFIRM_PASSWORD").closest("div").find(".error").remove();
                        }
                        $("#CONFIRM_PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });
                    }
                }
            });

            $("#CONFIRM_PASSWORD").on("focusout", function () {
                if ($(this).parent().children(".error").length > 0) {
                    $("#CONFIRM_PASSWORD").closest("div").find(".error").remove();
                }
                if ($(this).val().length < 6) {
                    $(this).after("<span class='error' style='color:red'>* PASSWORD must be greater than 6 charachters</span>");
                } else {
                    if ($(this).parent().children().index(".error") > 0) {
                        $(this).closest("div").find(".error").remove();
                    }

                }
                if ($("#PASSWORD").val() !== $("#CONFIRM_PASSWORD").val()) {
                    $("#CONFIRM_PASSWORD").css({ "border": "2px solid #F90A0A" });
                    if ($(this).parent().children(".error").length > 0) {
                        $(this).next(".error").append("\n* PASSWORD are not the same");
                    }
                    else {
                        $("#CONFIRM_PASSWORD").after("<span class='error' style='color:red'>PASSWORD are not the same</span>");
                    }
                } else {
                    if ($(this).parent().children(".error").length > 0) {
                        $("#CONFIRM_PASSWORD").closest("div").find(".error").remove();
                    }
                    $("#CONFIRM_PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });

                }
            });

            $("#AccountTypeID").on("change", function () {
                if ($("#AccountTypeID :selected").val() == "") {
                    $("#AccountTypeID").css({ "border": "2px solid #F90A0A" });
                } else {
                    $("#AccountTypeID").css({ "border": "1px solid rgb(122, 122, 122)" });
                }
            });

        });



        function ShowImagePreview(imageUploader, previewImage) {
            if (imageUploader.files && imageUploader.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $(previewImage).attr('src', e.target.result);
                }
                reader.readAsDataURL(imageUploader.files[0]);
            }
        }
        function jQueryAjaxPost(form) {
            var msg = "";
            msg += "Error \n" +
                "-------------------------------------------------\n" +
                " Some Fields are invalid\n" +
                " Please, check your form again and re submit\n";
            var result = true;
            var form = $(form);
            $.ajaxSetup({ cache: false });



            if ($("#USERACCOUNT").val() == "") {
                $("#USERACCOUNT").css({ "border": "2px solid #F90A0A" });
            } else {
                $("#USERACCOUNT").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#CULTURE").val() == "") {
                $("#CULTURE").css({ "border": "2px solid #F90A0A" });
            } else {
                $("#CULTURE").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#LASTNAME").val() == "") {
                $("#LASTNAME").css({ "border": "2px solid #F90A0A" });
            } else {
                $("#LASTNAME").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#FIRSTNAME").val() == "") {
                $("#FIRSTNAME").css({ "border": "2px solid #F90A0A" });
            } else {
                $("#FIRSTNAME").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if ($("#PASSWORD").val() == "") {
                $("#PASSWORD").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* PASSWORD field required";
            } else {
                $("#PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });
            }


            if ($("#PASSWORD").val() !== $("#CONFIRM_PASSWORD").val()) {
                result = false;
                msg += "\n* The PASSWORDs are not the same";
                $("#CONFIRM_PASSWORD").css({ "border": "2px solid #F90A0A" });
            }
            if ($("#CONFIRM_PASSWORD").val() == "") {
                $("#CONFIRM_PASSWORD").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* CONFIRM PASSWORD field required";
            } else {
                $("#CONFIRM_PASSWORD").css({ "border": "1px solid rgb(122, 122, 122)" });
            }
            if ($("#AccountTypeID :selected").val() == "") {
                $("#AccountTypeID").css({ "border": "2px solid #F90A0A" });
                result = false;
                msg += "\n* Role field required";
            } else {
                $("#AccountTypeID").css({ "border": "1px solid rgb(122, 122, 122)" });
            }

            if (result) {

                $.ajax({
                    type: 'POST',
                    url: $(form)[0].action,
                    data: $(form).serialize(),
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            //$("#firstTab").html(response.html);
                            $.notify(response.message, "success");
                        }
                        else {
                            $.notify(response.message, "error");
                        }

                    }
                });
                return true;
            }
            else {

                alert(msg);
                return false;
            }
        }
    </script>
}
